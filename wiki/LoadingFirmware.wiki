#summary How to load firmware to the Open-EVSE.

= Introduction =

Loading firmware to the Open-EVSE requires an ISP. There are many AVR compatible programmers available. The USBtinyISP Kit from Adafruit is a good choice, it is inexpensive and open. http://www.ladyada.net/make/usbtinyisp/  You can buy it from Adafruit:
http://www.adafruit.com/products/46

<img src="http://farm2.static.flickr.com/1388/531946274_b6aec192ba.jpg" />

= Firmware =
The latest firmware is located on a Github maintained by lincomatic. 
https://github.com/lincomatic/open_evse 


= Software =
You will also need software compatible with your ISP such as Avrdude or the Arduino IDE. 

== Arduino IDE ==
If you wish to modify the source code than the Arduino IDE is a good choice. It includes an code editor, serial monitor, and will compile and upload your code to the Open EVSE.
http://arduino.cc/en/Main/Software

To set up the Arduino IDE for use with an ISP check out lincomatic's blog. http://blog.lincomatic.com/?p=10

=== Enabling features ===
To enable a feature delete the "//" in front of the #define tag. To disable a feature add "//"...

Example to enable the Advanced Power Supply features (ADVPWR) Change the line:

//#define ADVPWR 

to 

#define ADVPWR

 
Note: Use Extreme caution with WATCHDOG, if delays were added that exceed the timer the EVSE board will reset in an endless loop. It may be very difficult or impossible to recover.


{{{
//-- begin features

// enable watchdog timer
//#define WATCHDOG

// GFI support
#define GFI
// for stability testing - shorter timeout/higher retry count
//#define GFI_TESTING


// serial port command line
#define SERIALCLI

//Adafruit RGBLCD
#define RGBLCD 
// Adafruit LCD backpack in I2C mode
//#define I2CLCD 

// Advanced Powersupply... Ground check, stuck relay, L1/L2 detection.
//#define ADVPWR

// single button menus (needs LCD enabled)
// connect an SPST button between BTN_PIN and GND via a 2K resistor
// How to use 1-button menu
// When not in menus, short press instantly stops the EVSE - another short press resumes.  Long press activates menus
// When within menus, short press cycles menu items, long press selects and exits current submenu
//#define BTN_MENU


//-- end features
}}}

=== Loading Libraries ===
To finish setting up your Arduino IDE you will need to insure any required libraries, indicated by #include, are copied to the libraries folder of your Arduino installation.

OpenEVSE has two types of libraries those that will always be required and those that are only required if you enable a certain feature.

The only library below not included in the basic Arduino installation is Time.h. More info on the Time library can be found here: http://arduino.cc/playground/Code/Time 

{{{
#include <EEPROM.h>
#include <avr/wdt.h>
#include <pins_arduino.h>
#include <Wire.h>
#include <Time.h>
#if defined(ARDUINO) && (ARDUINO >= 100)
#include "Arduino.h"
#else
#include "WProgram.h" // shouldn't need this but arduino sometimes messes up and puts inside an #ifdef
#endif // ARDUINO
}}}

Some features if enabled will also require a library, a good example is the Adafruit RGB LCD or the Adafruit i2c backpack.

{{{
#ifdef RGBLCD //Adafruit RGB LCD
#include <Adafruit_MCP23017.h>
#include <Adafruit_RGBLCDShield.h>
#define RED 0x1
#define YELLOW 0x3
#define GREEN 0x2
#define BLUE 0x6
#endif //Adafruit RGB LCD

#ifdef I2CLCD
#include <LiquidTWI.h>
#define LCD_I2C_ADDR 0 // for adafruit LCD backpack
#endif // I2CLCD
}}}

The Adafruit RGB LCD libraries Adafruit_MCP23017.h and Adafruit_RGBLCDShield.h can be found here 

http://ladyada.net/make/rgblcdshield/use.html


The Adafruit i2c backpack library LiquidTWI2.h can be found here: 

https://github.com/lincomatic/LiquidTWI2/downloads 

== AVRDude ==
If you want a quick and way to upload unmodified code install AVRDude and download the pre-compiled hex file in the downloads section.

Adafruit has some really good tutorials for installing and running AVRDude...

http://www.ladyada.net/learn/avr/setup-win.html

http://www.ladyada.net/learn/avr/avrdude.html

If you built your own board and your EVSE has never had any version of EVSE firmware or an Arduino boot loader (virgin chip) you will need to set your AVR fuses before loading the OpenEVSE hex file.. Setting fuses only needs to be done once.

Command assumes you are using the USBtiny, if using another programmer substitute the correct programmer after -c
{{{
avrdude -c usbtiny -p m328p -U lfuse:w:0xFF:m
avrdude -c usbtiny -p m328p -U hfuse:w:0xDA:m
avrdude -c usbtiny -p m328p -U efuse:w:0x05:m
}}}

Once your board has its fuses set you can load the OpenEVSE firmware.

For windows...
Create a folder on C:\ called OpenEVSE
Copy the HEX file to that folder
run cmd for the command prompt.
type "C:\OpenEVSE"
from the C:\OpenEVSE folder run the following command:

Command assumes you are using the USBtiny, if using another programmer substitute the correct programmer after -c
{{{
avrdude -c usbtiny -p m328p -U flash:w:open_evse.hex
}}}

Alternate command if using serial FTDI with the Arduino bootloader. (Arduino boards or OpenEVSE with Arduio bootloader)
{{{
avrdude -c arduino -p m328p -P COMxx -b 115200 -D flash:w:open_evse.hex 
}}} 