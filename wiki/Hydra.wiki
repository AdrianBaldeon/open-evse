#summary The J1772 "Hydra" - Charge 2 EVs from one EVSE.

= The Hydra =

We have 6 L2 J1772 chargers and a ChaDEmo at work. For various reasons, my colleagues are more politically attuned to EV ownership than the general population, even here in the SF Bay area. So those chargers are oversubscribed. What makes it worse is that most of those cars are Leafs, which only charge from those L2 chargers at 15A. Since the chargers are 30A, half the potential is being wasted. Why they don't just use the ChaDEmo is beyond me.

It would be easy to make a box with a square wave generator to dummy up a pilot to feed two cars from a J1772 inlet, but that would neither be spec compliant, nor safe. No, the correct thing to do is to intelligently allocate the incoming power to the two cars as needed.

And thus, the Hydra was born.

= Details =

The Hydra owes much of its existence to OpenEVSE. Some of its circuitry was cribbed from the OpenEVSE Plus. The Hydra has the same 16 MHz ATMega controller as the OpenEVSE and Arduino Uno. Connected to that are the following subsystems:

  * A comparator to convert the incoming pilot signal into a TTL compatible square wave so that the controller can determine the duty cycle, and thus, the ampacity of the host EVSE.
  * A comparator to watch for transitions on the incoming proximity pin. The controller will gracefully shut down both cars if the proximity resistance rises above 300 ohms (or so).
  * Two pilot signal generators. OP Amps are used to convert digital outputs from the controller into + or - 12 volt outputs. The PWM timer systems of the controller will be used to generate the varying duty cycles.
  * Resistor networks feed the outgoing pilots back into the controller on two analog pins so that state changes and diode failures on each car can be detected.
  * Each car will have a current transformer on one of its hot leads so that the car's current draw can be monitored. If a car exceeds its allocated current, it will be shut down.
  * The Hydra will have an RGB LCD display to show status information.

The software in the Hydra has the following rules:

  * If no car is charging, both cars get 100% of the incoming pilot.
  * If one car is charging, it gets 100% and the other car gets 50%.
  * If both cars are charging, both cars get 50%.
  * If both cars are charging and one stops, the other pilot is immediately raised to 100%. The car that stopped continues to get 50% in accordance with the above rules.
  * If only one car is charging, and the other enters state C, it will be given a 10 second delay. During that delay, the other car's pilot will be reduced to 50% and it will have 5 seconds to respond and reduce its draw. After the delay, the second car's power will be turned on.
  * If any car exceeds its current allowance for 5 seconds, it is errored out.
  * If any car fails a diode check at any time, it is errored out.
  * If any car enters an invalid state (7.5 volts, for instance - between B and C), it is errored out.
  * If the incoming pilot drops below the 12A minimum (because that's the smallest that can legally be split in half) or stops being a valid pilot, both cars are errored out.
  * If the proximity is pushed on the inlet, both cars are errored out.
  * If a car is errored out, its plug must return to state A to clear the error (so pull the plug out and reinsert it).

The Hydra does not attempt to detect L1 vs L2 - it only cares about amps. It also doesn't attempt to detect ground faults - the source EVSE is assumed to have its own GFCI. Also, my prototype does not include fuses or breakers - again, the source EVSE is assumed to have over-current protection.

A this point, there are Eagle files with a schematic and board layout. The prototype boards have been ordered from OSHPark and two DigiKey BOMs have been created - one for the board parts, one for the chassis components. Apart from that one would need to buy an RGB LCD (either Chris' OpenEVSE display or an AdaFruit RGB LCD shield), two J1772 cable/plug assemblies, a J1772 inlet and a chassis/cabinet/box in which to install it all.

The board has the following interface points:

  * 2 two pin terminals for the coils for two power relays for car A & B
  * 2 two pin terminals for the current transformers for car A & B
  * 1 three pin terminal that has the two outgoing pilot signals, plus a ground connection
  * 1 three pin terminal that comes from the inlet, with ground, pilot and proximity
  * 1 two pin terminal that brings 12 VDC from an external power supply
  * 1 two pin terminal that connects to an external power switch. This switch switches the inlet pilot resistance from state B to state C when closed. Optionally, you can simply jumper the terminal if you would rather.
  * 1 4 pin I2C header for the LCD
  * 1 6 pin ISP socket for programming

There are 4 things on the board that require some attention:
  * The four zener diodes listed in the schematic are wrong. Eagle didn't come with a 5 volt zener diode, so I picked a close one. The diodes in the BOM are correct.
  * R8 is a 2.7k resistor that runs between proximity and ground. Some (most? all?) J1772 inlets come with a 2.7k resistor installed between proximity and ground. If yours does, then do not install R8.
  * Rx and Ry are burden resistors for the CT coils. These need to be chosen based on the CT you're going to use and the maximum outlet current rating for your Hydra. For my prototype, the CTs I've selected have a Te of 1018 and the design current for the Hydra will be 30A. For that configuration, a 56 ohm resistor is appropriate. You'll also find a #define in the source code for the Hydra that you will need to adjust in concert with this. Customizing the burden resistor allows you to maximize the accuracy of the ammeter readings for each car.

The software is hosted on GitHub at https://github.com/nsayer/hydra

= Wiring =

The two car relays are DPST relays with 12vdc coils rated for whatever your outlet current is.

In some (most?) cases, the J1772 inlet you get will be higher rated than your plugs and cables. The software is capable of limiting the inlet current separately, but in order to take advantage of this, you must insure that your relays are wired in a "star" pattern rather than daisy-chained. In a daisy-chain, the full current of the entire system will flow through the first component's cables, limiting the design current to that capacity. If you connect each relay's supply leads together to the inlet supply at the same point, then the inlet current is allowed to be higher.

For each relay, designate a "line" side and a "load" side. On the line side, run a wire (for 30A, use 10 gauge) from each terminal of the relay to one of the two inlet hot cables. I used (large) wire nuts to connect the three wires for each phase together.

You also need to get "line" power into the power supply. It can use 22 gauge wire. You can either add those wires into the wire nut forest or you can piggyback one of the quick connects on one of the relays.

On the load side of each relay, connect up the hot wires of one of the J1772 cables. Run one of the hot lines through a CT coil before connecting it to the relay. Unlike OpenEVSE, you run only one of the lines through the coil, not both. It doesn't matter which one you pick.

Be sure that you pair up the relay coil wires with the CT coil wires. It doesn't matter which pair is A or B (other than car "A" being on the left side of the LCD display), but be sure that the lines for each relay coil match the corresponding CT! You don't want to measure the wrong car's current draw. Be sure also to connect the pilot leads up to the correct pilot outputs (A or B). Again, don't want to mix up the two cars.

The proximity wires, if present, from the car plug/cable sets is not used.

Don't forget to connect all of the grounds to a ground bus:

  * The inlet ground
  * Each plug/cable ground
  * The inlet ground connection from the board
  * the output pilot ground connection from the board
  * (if applicable) any ground from the power supply

If desired, connect a SPST switch up to the POWER_SW terminals on the board. If you don't want to do this, then you must place a jumper across them instead. 22 gauge wire is sufficient in either case. The power switch doesn't actually carry any appreciable current on it.

Lastly, connect the LCD up via the I2C cable. Unlike OpenEVSE, there is no support for the buttons.

= Future plans =

First, I am going to complete the prototype and debug it. Once the design is field-proven, I will either get OSHPark to add the board to their single-unit-quantity store or I will sell boards for $20 each plus shipping (that's about my cost).

The circuit board BOM from DigiKey is around $45 + tax and shipping. The chassis BOM is around $85 + tax and shipping. A J1772 inlet is $120 from Modular EV Power and J1772 cables are $150 each from Leviton. A box and two cable glands are around $50 from Polycase. So just in parts alone, a Hydra costs close to $700.